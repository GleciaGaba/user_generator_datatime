"""
FICHE R√âCAPITULATIVE
Il est tr√®s courant que nous ayons besoin de g√©rer des dates en programmation.

Que ce soit pour g√©rer les dates d'anniversaires des clients d'un site web, annoncer un compte √† rebours ou encore calculer le nombre de jours entre deux dates.

Pour r√©aliser ces op√©rations, Python dispose de la biblioth√®que native datetime qui permet de g√©rer des objets repr√©sentant des dates et des heures.

Comment un ordinateur calcule-t-il le temps ?
Vous avez peut-√™tre d√©j√† entendu parler de ¬´ l'Epoch ¬ª, une date arbitraire aussi appel√©e ¬´ heure Unix ¬ª :

L'heure Unix ou heure Posix (aussi appel√©e Unix Timestamp) est une mesure du temps bas√©e sur le nombre de secondes √©coul√©es depuis le 1er janvier 1970 00:00:00 UTC, hors secondes intercalaires. Elle est utilis√©e principalement dans les syst√®mes qui respectent la norme POSIX1, dont les syst√®mes de type Unix, d'o√π son nom. C'est la repr√©sentation POSIX du temps.

d√©finition de Wikipedia

Le calcul du temps peut s'av√©rer complexe pour tout un tas de raison comme les secondes intercalaires, les fuseaux horaires ou encore l'heure d'√©t√©.

G√©n√©ralement cela ne pose pas de probl√®mes (on a rarement besoin de prendre en compte les potentielles microsecondes de diff√©rence entre le temps universel et le temps solaire).

Mais nous verrons dans la suite de cet article que notamment les fuseaux horaires doivent √™tre pris en compte pour √©viter des erreurs qui peuvent s'av√©rer probl√©matiques (comme envoyer un mail √† 3h du matin au lieu de 9).

Avec Python, il est possible d'afficher le nombre de secondes √©coul√©es depuis l'heure Unix avec la fonction time du module time :

>>> from time import time
>>> time()
1634911800.733942
Au moment o√π j'√©cris cet article, il s'est donc √©coul√© 1634911800 secondes depuis le 1er janvier 1970.

Repr√©senter le temps avec datetime
Pour aller un peu plus loin et manipuler des dates (et des heures), Python dispose du module datetime ainsi que trois classes principales :

date

time

datetime

Vous vous en doutez, la classe date sert √† g√©rer des dates, time √† g√©rer du temps et datetime les deux.

Toutes ces classes disposent d'attributs permettant d'indiquer une ann√©e, un mois, un jour, une heure et √©galement des informations de fuseau horaire.

Voyons dans le d√©tail comment cr√©er ces objets :

>>> from datetime import date, time, datetime
>>> date(year=2021, month=10, day=22)
datetime.date(2021, 10, 22)
>>> time(hour=10, minute=19, second=10)
datetime.time(10, 19, 10)
>>> datetime(year=2021, month=10, day=22, hour=10, minute=19, second=10)
datetime.datetime(2021, 10, 22, 10, 19, 10)
Le nom du module datetime √©tant le m√™me que le nom de la classe, on confond souvent les deux. Si vous importez le module directement, il faudra donc utiliser datetime.datetime ce qui est assez confu. Je pr√©f√®re ainsi importer directement la classe avec from datetime import datetime.

Remarquez que tous les noms des param√®tres de ces classes sont au singulier (hour, day, minute...). Ce ne sera pas toujours le cas dans les diff√©rentes classes et fonctions que nous allons voir dans cet article, il est donc important de noter quand c'est le cas ou non.

Ces trois classes nous permettent de repr√©senter des p√©riodes dans le temps en utilisant des nombres entiers pour les ann√©es, mois, jours, etc.

Les classes datetime et date disposent √©galement de deux fonctions, now et today qui permettent respectivement de r√©cup√©rer la date et l'heure d'aujourd'hui (pour datetime) et la date d'aujourd'hui (pour date) :

>>> datetime.now()
datetime.datetime(2021, 10, 22, 10, 25, 7, 742193)
>>> date.today()
datetime.date(2021, 10, 22)
La fonction today est disponible sur les objets datetime mais la fonction now n'est pas disponible sur les objets date.

>>> datetime.today()
datetime.datetime(2021, 10, 22, 10, 26, 36, 718675)
>>> datetime.now()
datetime.datetime(2021, 10, 22, 10, 26, 39, 182568)
>>> date.now()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: type object 'datetime.date' has no attribute 'now'
Une fois que nous avons cr√©√© un objet de time date, time ou datetime, nous pouvons r√©cup√©rer les diff√©rents attributs de ces objets :

>>> today = date.today()
>>> today.day
22
L√† encore, notez l'utilisation du singulier pour le nom de l'attribut.

√Ä noter √©galement qu'il est possible de r√©cup√©rer les valeurs de ces attributs mais pas de les modifier directement.

>>> today = date.today()
>>> today.day = 23
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: attribute 'day' of 'datetime.date' objects is not writable
Pour remplacer un √©l√©ment d'un objet datetime on peut utiliser la m√©thode replace :

>>> today = date.today()
>>> tomorrow = today.replace(day=today.day + 1)
>>> today
datetime.date(2021, 10, 22)
>>> tomorrow
datetime.date(2021, 10, 23)
Je vous d√©conseille cependant d'utiliser cette m√©thode car elle ne prend pas en compte les probl√®mes de fuseaux horaires et du passage √† l'heure d'√©t√©. Nous verrons plus loin dans cet article comment modifier une date de la bonne fa√ßon.

Cr√©er une date avec une cha√Æne de caract√®res
Il arrive souvent que nous souhaitions cr√©er un objet datetime non pas √† partir de nombres entiers mais directement √† partir d'une cha√Æne de caract√®res.

Le probl√®me qui se pose est que la repr√©sentation des dates sous forme de cha√Æne de caract√®res peut prendre beaucoup de formes.

Par exemple aux √âtats-Unis, les dates sont g√©n√©ralement repr√©sent√©es sous le format MM-DD-YYYY (par exemple 10-22-2021 pour repr√©senter le 22 octobre 2021).

En Europe on utilise plut√¥t DD-MM-YYYY (22-10-2021 pour le 22 octobre 2021).

Tout au long de cet article, je repr√©senterai les jours, mois et ann√©es avec les lettres D, M et Y (Day, Month et Year).

La norme ISO8601 a √©t√© cr√©√©e pour pallier √† ce probl√®me. Selon cette norme, on va de l'√©l√©ment le plus grand au plus petit, une date serait donc repr√©sent√©e par YYYY-MM-DD HH:MM:SS.

Les objets de la classe datetime permettent de cr√©er une instance √† partir de ce format gr√¢ce √† la fonction fromisoformat :

>>> from datetime import date
>>> date.fromisoformat("2021-10-22")
datetime.date(2021, 10, 22)
Dans le cas o√π une date n'est pas dans le format ISO8601 (c'est souvent le cas), on peut utiliser √† la place la fonction strptime qui permet de sp√©cifier le formatage de la date.

Imaginons une date repr√©sent√©e par la cha√Æne de caract√®res suivante :

'22 Oct 2021'
Gr√¢ce √† strptime et √† un langage sp√©cifique dont vous pouvez retrouver les caract√©ristiques sur ce site, on peut indiquer le format de la date en le passant en 2e argument √† la fonction :

>>> datetime.strptime("22 Oct 2021", "%d %b %Y")
datetime.datetime(2021, 10, 22, 0, 0)
Cette m√©thode n'est disponible que sur la classe datetime. Si vous n'arrivez pas √† vous souvenir du nom de cette m√©thode, sachez que le p de strptime signifie parser (¬´ analyseur ¬ª en fran√ßais). strptime est donc un raccourci de string parser time.

Et si nous souhaitons r√©aliser l'op√©ration inverse, nous pouvons le faire avec la fonction strftime (string from time) :

>>> now = datetime.now()
>>> now.strftime("%d %b %Y")
'22 Oct 2021'
Deux modules non inclus dans la biblioth√®que standard de Python permettent de manipuler les dates avec beaucoup plus de facilit√© :

dateutil

dateparser

dateutil nous permet gr√¢ce au module parser et la fonction parse de cr√©er un objet datetime sans avoir besoin de sp√©cifier le format comme nous l'avons fait avec strptime et avec beaucoup plus de libert√©s :

>>> from dateutil import parser
>>> parser.parse("12 october 2021 at 9 am and 18 minutes")
datetime.datetime(2021, 10, 12, 9, 18)
Notez cependant que nous utilisons ici october au lieu de octobre, cette biblioth√®que ne comprenant pas le fran√ßais :

>>> parser.parse("12 octobre 2021")
  File "<stdin>", line 1, in <module>
    raise ParserError("Unknown string format: %s", timestr)
dateutil.parser._parser.ParserError: Unknown string format: 12 octobre 2021
La biblioth√®que dateparser elle va cependant beaucoup plus loin en nous permettant d'utiliser des mots marqueurs de temps comme ¬´ aujourd'hui ¬ª ou ¬´ demain ¬ª et ce m√™me dans diff√©rentes langues (ü§Ø) :

>>> dateparser.parse("aujourd'hui")
datetime.datetime(2021, 10, 22, 11, 11, 18, 244967)
>>> dateparser.parse("demain")
datetime.datetime(2021, 10, 23, 11, 10, 19, 246512)
>>> dateparser.parse("ontem")  # La date d'hier en Portugais
datetime.datetime(2021, 10, 21, 11, 10, 46, 885066)
Cette biblioth√®que est vraiment incroyable et j'ai encore du mal √† trouver ses limites :

>>> dateparser.parse("Il y a un mois")
datetime.datetime(2021, 9, 22, 11, 12, 42, 170722)
>>> dateparser.parse("One year ago at midnight")
datetime.datetime(2020, 10, 22, 0, 0)
La gestion des fuseaux horaires
La gestion des fuseaux horaires est possible de diff√©rentes fa√ßons, surtout depuis l'ajout dans la version 3.9 de Python d'un nouveau module zoneinfo.

Les diff√©rents modules que nous allons voir dans cette partie utilisent une base de donn√©es appel√©e tz database √©galement appel√©e IANA database.

Vous pouvez retrouver tous les fuseaux horaires de cette base de donn√©es ainsi que leur nom sur la page wikipedia associ√©e.

Les dates ¬´ naive ¬ª et ¬´ aware ¬ª
Une date ¬´ naive ¬ª est une date qui n'a aucune information de fuseau horaire (timezone en anglais). √Ä l'inverse une date ¬´ aware ¬ª est d√©finie selon un fuseau horaire pr√©cis.

Par d√©faut, les objets datetime comme ceux que nous avons cr√©√©s ci-dessus sont ¬´ naive ¬ª. La fa√ßon la plus simple de v√©rifier les informations de fuseau horaire d'un objet datetime est de v√©rifier l'attribut tzinfo :

>>> from datetime import datetime
>>> now = datetime.now()
>>> now.tzinfo
None
Ajouter un fuseau horaire sp√©cifique
Il existe diff√©rentes fa√ßons d'ajouter des informations de fuseau horaire √† un objet datetime en fonction des versions Python que vous utilisez.

Depuis la version 3.9 de Python, le module de la biblioth√®que standard zoneinfo permet de g√©rer les fuseaux horaires. Si vous utilisez une version de Python inf√©rieure √† 3.9, je vous conseille de regarder des modules comme dateutil ou pytz.

Les principes que nous allons voir dans la suite de cet article restent les m√™mes peu importe le module utilis√©.

Gr√¢ce √† la classe ZoneInfo du module zoneinfo on peut cr√©er un fuseau horaire en nous basant sur la base de donn√©es IANA.

Si je souhaite r√©cup√©rer le fuseau horaire de Vancouver, je peux utiliser la cha√Æne de caract√®res "America/Vancouver" :

>>> from zoneinfo import ZoneInfo
>>> now_in_vancouver = datetime.now(tz=ZoneInfo("America/Vancouver"))
>>> now_in_montreal = datetime.now(tz=ZoneInfo("America/Montreal"))
>>> now_in_montreal.hour
12
>>> now_in_vancouver.hour
9
On retrouve bien les 3 heures de d√©calages entre Montr√©al et Vancouver.

√âtant √† Montr√©al √† l'heure o√π j'√©cris cet article, j'aurais pu utiliser datetime.now() sans pr√©ciser le param√®tre tz pour r√©cup√©rer la date et l'heure de l'endroit o√π je me trouve.

J'aurais donc eu un objet ¬´ aware ¬ª (now_in_vancouver) et un objet ¬´ naive ¬ª (now_in_montreal).

Cela ne pose pas de probl√®me tant que nous n'effectuons aucune op√©ration entre ces deux objets. En cas de comparaison ou de soustraction par exemple, nous avons une erreur si nous utilisons un objet ¬´ naive ¬ª et un objet ¬´ aware ¬ª :

>>> now_in_vancouver = datetime.now(tz=ZoneInfo("America/Vancouver"))
>>> now_in_montreal = datetime.now()
>>> now_in_vancouver > now_in_montreal
  File "<stdin>", line 1, in <module>
TypeError: cant compare offset-naive and offset-aware datetimes
>>> now_in_vancouver - now_in_montreal
  File "<stdin>", line 1, in <module>
TypeError: cant subtract offset-naive and offset-aware datetimes
Pour changer de fuseau horaire, on utilise la m√©thode astimezone :

>>> now_in_paris = now_in_vancouver.astimezone(ZoneInfo("Europe/Paris"))
>>> print(now_in_paris.hour)
18
L√† encore, la diff√©rence est coh√©rente (9h de d√©calage entre Vancouver et Paris, on passe donc de 9h √† 18h).

Le Temps universel coordonn√© (UTC)
Vous avez d√©j√† probablement entendu les acronymes UTC ou GMT, souvent utilis√©s quand vous devez planifier une r√©union avec un coll√®gue √† l'autre bout du monde.

On fait souvent la confusion entre UTC et un fuseau horaire.

UTC n'est pas un fuseau horaire, c'est une √©chelle de temps qui a √©t√© accept√©e par la grande majorit√© des pays comme √©chelle de temps universelle.

Petite anecdote int√©ressante : l'appellation correcte en anglais du temps universel coordonn√© (TUC) serait coordinated universal time, abr√©g√© en CUT. Les experts de l‚ÄôUnion internationale des t√©l√©communications √©taient d‚Äôaccord pour d√©finir une abr√©viation commune √† toutes les langues, mais ils √©taient divis√©s sur le choix de la langue entre le fran√ßais et l'anglais. Finalement, c‚Äôest le compromis UTC, n√©cessitant un effort des deux parties, qui fut choisi. C‚Äôest cette notation qui est utilis√©e par la norme ISO 8601. (de wikipedia)

On pense souvent √† tort qu'UTC correspond √† un fuseau horaire car nous pouvons convertir un object datetime en UTC gr√¢ce au module timezone de la biblioth√®que datetime en le passant au param√®tre tz :

>>> from datetime import datetime, timezone
>>> now = datetime.now(tz=timezone.utc)
>>> now
datetime.datetime(2021, 10, 22, 15, 57, 4, 822209, tzinfo=datetime.timezone.utc)
>>> now.tzinfo
datetime.timezone.utc
Quand vous comparez des dates ou que vous souhaitez les modifier, il est tr√®s important de toujours le faire sur une base UTC. Je r√©p√®te : ne faites pas d'op√©rations sur des dates avec un fuseau horaire sp√©cifique.

Il est notamment dangereux d'effectuer une op√©ration sur une date avec un fuseau horaire pr√©cis car les changements d'heures √©t√© / hiver ne seront pas pris en compte.

Par exemple √† Montr√©al, il existe deux fuseaux horaires, EDT et EST (Eastern Daylight Time et Estern Standard Time), selon les p√©riodes de l'ann√©e.

En 2020, le passage de l'heure d'hiver √† l'heure d'√©t√© a eu lieu dans la nuit du 7 au 8 mars.

>>> from datetime import datetime
>>> from zoneinfo import ZoneInfo

>>> montreal_tz = ZoneInfo('America/Montreal')
>>> print(datetime(2020, 3, 7, 13, 0, 0, tzinfo=montreal_tz))
2020-03-07 13:00:00-05:00
>>> print(datetime(2020, 3, 8, 13, 0, 0, tzinfo=montreal_tz))
2020-03-08 13:00:00-04:00
Dans le code ci-dessus, on peut voir la diff√©rence avec le temps UTC √† la fin de l'affichage des dates (2020-03-07 13:00:00üëâ-05:00üëà)

Le 7 mars, on a une diff√©rence de 5h entre le fuseau horaire de Montr√©al et UTC. Le 8 mars, la diff√©rence n'est plus que de 4h entre le fuseau horaire de Montr√©al et UTC.

On peut √©galement voir cette diff√©rence avec le changement de nom du fuseau horaire :

>>> montreal_tz = ZoneInfo('America/Montreal')
>>> print(datetime(2020, 3, 7, 13, 0, 0, tzinfo=montreal_tz).tzname())
EST
>>> print(datetime(2020, 3, 8, 13, 0, 0, tzinfo=montreal_tz).tzname())
EDT
La diff√©rence d'une heure par rapport √† UTC est normale car on a avanc√© d'une heure dans la nuit du 7 au 8 mars 2020 √† Montr√©al. L'√©cart relatif par rapport √† UTC n'est donc plus le m√™me entre le 7 et le 8 mars.

L'heure universelle UTC elle n'a pas boug√©, mais l'heure √† Montr√©al oui. Et ces changements n'arrivent pas toujours au m√™me moment partout dans le monde.

C'est pour cette raison que tous les ans, pendant 3 semaines environ, il n'y a plus que 5h de d√©calage entre Paris et Montr√©al au lieu de 6 (car le passage √† l'heure d'√©t√© en France se fait en g√©n√©ral 2 √† 3 semaines apr√®s le changement au Canada).

Et cette diff√©rence peut causer des probl√®mes lorsque vous r√©alisez des op√©rations sur une date.

Pour √™tre tr√®s pr√©cis, EST et EDT ne sont pas des fuseaux horaires en soi. Un fuseau horaire est d√©fini par un continent et le plus souvent une ville, comme nous l'avons vu dans la base de donn√©es IANA (par exemple Europe/Paris ou America/Montreal).

EST et EDT repr√©sentent la diff√©rence de temps avec UTC. Quand nous indiquons un fuseau horaire √† ZoneInfo, nous donnons donc le nom du fuseau horaire (par exemple America/Montreal) et en fonction de la p√©riode de l'ann√©e, nous nous trouverons donc soit en EST soit en EDT, avec une diff√©rence par rapport √† UTC qui ne sera pas la m√™me.

D'ailleurs, pour afficher le ou les noms associ√©s au fuseau horaire o√π l'on se trouve on peut utiliser le module time :

>>> import time
>>> time.tzname
('EST', 'EDT')
La mauvaise fa√ßon de faire
Voyons maintenant un exemple dans lequel nous travaillons directement avec un objet datetime sur le fuseau horaire de Montr√©al.

Nous souhaitons ajouter un jour √† la date du 7 mars (nous utilisons pour ce faire la classe timedelta que nous verrons plus en d√©tail dans la suite de cet article) :

>>> from datetime import datetime, timedelta
>>> from zoneinfo import ZoneInfo
>>> montreal_tz = ZoneInfo('America/Montreal')
>>> march_7 = datetime(2020, 3, 7, 13, 0, 0, tzinfo=montreal_tz)
>>> march_8 = march_7 + timedelta(days=1)
>>> print(march_8)
2020-03-08 13:00:00-04:00
Remarquez que l'heure n'a pas boug√©. On vient juste d'ajouter 1 jour √† notre date, sans prendre en compte le passage √† l'heure d'√©t√©.

La bonne fa√ßon de faire
Reprenons maintenant le m√™me exemple en convertissant d'abord notre date en UTC avant de faire l'addition, puis en modifiant le fuseau horaire par la suite :

>>> from datetime import datetime, timedelta
>>> from zoneinfo import ZoneInfo

>>> march_7 = datetime(2020, 3, 7, 13, 0, 0)
>>> march_7_utc = march_7.astimezone(ZoneInfo("UTC"))

>>> march_8 = march_7_utc + timedelta(days=1)
>>> march_8 = march_8.astimezone(montreal_tz)
>>> print(march_8)
2020-03-08 14:00:00-04:00
Nous remarquons cette fois-ci que l'heure d'√©t√© a bien √©t√© prise en compte et notre date affiche 14h au lieu de 13.

En faisant l'op√©ration sur une date bas√©e sur UTC puis en convertissant par la suite dans le fuseau horaire voulu, nous obtenons le bon r√©sultat.

Prenons un autre cas de figure pour illustrer les probl√®mes caus√©s lors du calcul de la diff√©rence entre deux dates :

>>> from datetime import datetime
>>> from zoneinfo import ZoneInfo

>>> utc = ZoneInfo("UTC")
>>> montreal_tz = ZoneInfo('America/Montreal')

>>> march_7 = datetime(2020, 3, 7, 13, 0, 0, tzinfo=montreal_tz)
>>> march_10 = datetime(2020, 3, 10, 13, 0, 0, tzinfo=montreal_tz)
>>> march_7_utc = march_7.astimezone(utc)
>>> march_10_utc = march_10.astimezone(utc)

>>> print(march_10 - march_7)
3 days, 0:00:00
>>> print(march_10_utc - march_7_utc)
2 days, 23:00:00
Dans le premier cas de figure (march_10 - march_7), une simple soustraction est effectu√©e entre les deux dates au fuseau horaire de Montr√©al. On obtient donc une diff√©rence parfaite de 3 jours qui ne prend l√† encore pas en compte le passage √† l'heure d'√©t√©.

Dans le deuxi√®me cas de figure, avec les dates converties en UTC, on observe cette fois-ci bien une diff√©rence d'1h avec le r√©sultat pr√©c√©dant, indiquant la prise en compte de l'heure qui a √©t√© "perdue" lors du passage √† l'heure d'√©t√©.

Calcul sur un objet datetime
Nous l'avons vu bri√®vement dans la partie pr√©c√©dente avec les timedelta, il est possible de r√©aliser des op√©rations entre deux dates ou de modifier une date.

La classe timedelta permet d'ajouter un intervalle de temps √† une date. Attention, timedelta ne repr√©sente pas une date mais un intervalle. Vous remarquerez d'ailleurs que cette fois-ci, les attributs sont au pluriel :

>>> from datetime import timedelta
>>> timedelta(days=20)
datetime.timedelta(days=20)
La classe timedelta permet d'ajouter ou de soustraire des jours, heures, secondes et m√™me microsecondes. On peut sans probl√®me utiliser des nombres positifs et n√©gatifs en m√™me temps.

Dans l'exemple ci-dessous, nous ajoutons 15 jours et soustrayons 5 heures √† la date actuelle :

>>> now = datetime.now()
>>> now_in_15_days_minus_5_hours = now + timedelta(days=15, hours=-5)
>>> print(now)
2021-10-22 17:43:23.840561
>>> print(now_in_15_days_minus_5_hours)
2021-11-06 12:43:23.840561
La date passe logiquement au mois suivant. C'est valable √©galement pour des mois comme le mois de f√©vrier qui ne contient que 28 jours.

>>> feb_27_2022 = datetime(2022, 2, 27)  # 27 f√©vrier
>>> print(feb_27_2022 + timedelta(days=3))  # On ajoute 3 jours
2022-03-02 00:00:00
On tombe bien sur le 2 mars et non le 30 f√©vrier.

La classe timedelta ne permet d'ajouter que des jours, heures, minutes mais pas des mois ou des ann√©es. C'est cependant possible avec la classe relativedelta du module dateutil que nous avons vu pr√©c√©demment mais qui n'est pas disponible dans la biblioth√®que standard de Python :

>>> from dateutil.relativedelta import relativedelta
>>> from datetime import datetime
>>> now = datetime.now()
>>> now_in_2_months = now + relativedelta(months=2)
>>> print(now)
2021-10-22 17:52:20.878397
>>> print(now_in_2_months)
2021-12-22 17:52:20.878397
Conclusion
J'esp√®re qu'avec cette partie vous y verrez un peu plus clair avec le module datetime. La base est assez simple √† ma√Ætriser mais il est tr√®s important dans un contexte professionnel de porter attention √† toutes les subtilit√©s que nous avons vues dans cet article.

On peut penser que quelques heures de d√©calage ne sont pas tr√®s graves, mais √ßa peut vite devenir probl√©matique quand vous souhaitez l'anniversaire √† vos clients un jour trop t√¥t ou que vous envoyez un mail sur le mauvais fuseau horaire.

Pour un projet perso √ßa peut passer, pour un projet avec des clients, il est tr√®s important de porter attention √† ces d√©tails.


"""